#define NOMINMAX
#include <iostream>
#include <Windows.h>
#include <chrono>
#include <algorithm>
#include "utils.hpp"
#pragma comment(linker, "/SUBSYSTEM:WINDOWS")

bool running = true;
unsigned short width = 1920;
unsigned short height = 1080;
void* screen_mem = malloc(width * height * sizeof(unsigned int));
void* screen_z = malloc(width * height * sizeof(float));
ID3D11Buffer* buf1;
ID3D11Buffer* buf2;
ID3D11Buffer* CPU_buf;
HRESULT hr;
Shader shader;

template <typename T> T clamp(T value, T min, T max) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
}

struct RGB {
    unsigned int r, g, b;
};

LRESULT w_proc(HWND window, UINT msg, WPARAM wparam, LPARAM lparam) {
    switch (msg) {
    case WM_SIZE: {
        width = LOWORD(lparam);
        height = HIWORD(lparam);

        screen_mem = realloc(screen_mem, sizeof(unsigned int) * width * height);
        if (screen_mem == nullptr) {
            std::cerr << "Failed to allocate screen memory.";
            exit(EXIT_FAILURE); // Handle error gracefully
        }

        screen_z = realloc(screen_z, sizeof(float) * width * height);
        if (screen_z == nullptr) {
            std::cerr << "Failed to allocate screen memory.";
            exit(EXIT_FAILURE); // Handle error gracefully
        }

        break;
    }

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(window, &ps);

        if (screen_mem) {
            BITMAPINFO bmi = {};
            bmi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
            bmi.bmiHeader.biWidth = width;
            bmi.bmiHeader.biHeight = -height;
            bmi.bmiHeader.biPlanes = 1;
            bmi.bmiHeader.biBitCount = 32;
            bmi.bmiHeader.biCompression = BI_RGB;

            StretchDIBits(hdc, 0, 0, width, height, 0, 0, width, height, screen_mem, &bmi, DIB_RGB_COLORS, SRCCOPY);
        }

        EndPaint(window, &ps);
        break;
    }

    case WM_DESTROY: {
        if (screen_mem) free(screen_mem);
        if (screen_z) free(screen_z);
        running = false;
        PostQuitMessage(0);
        return 0;
    }

    default: {
        return DefWindowProc(window, msg, wparam, lparam);
    }
    }
}

int WinMain(HINSTANCE h_inst, HINSTANCE p_inst, LPSTR lpcmdln, int n_cmd_show) {
    attach_console();

    unsigned int triangle_count = 72;
    ID3D11Device* device = nullptr;
    ID3D11DeviceContext* ctx = nullptr;
    D3D_FEATURE_LEVEL level;
    ID3D11ComputeShader* compute_shader;
    WNDCLASS w_class = { 0 };

    w_class.lpszClassName = L"class";
    w_class.lpfnWndProc = w_proc;
    w_class.hInstance = h_inst;

    RegisterClassW(&w_class);

    HWND wnd = CreateWindowExW(0, L"class", L"My game engine, with just the windows API", WS_OVERLAPPEDWINDOW, 0, 0, width, height, 0, 0, h_inst, 0);
    ShowWindow(wnd, n_cmd_show);

    for (int i = 0; i < width * height; i++) {
        ((float*)screen_z)[i] = FLT_MAX; // Start with maximum depth (farthest)
    }

    // THE POSITIONS NEED TO BE CLOCKWISE (CW)
    float positions[] = {
        100, 100, 10,
        1820, 100, 10,
        100, 980, 10,

        1820, 100, 10,
        1820, 980, 10,
        100, 980, 10,

        144, 22, 9.177386566206051,
        204, 142, 0.8402333638630188,
        84, 142, 1.4563392346378523,

        317, 417, 7.981953088227298,
        342, 467, 1.3262057483713108,
        292, 467, 6.968730297305459,

        393, 433, 7.198064335964771,
        407, 461, 5.719431309299229,
        379, 461, 0.4488805468746926,

        126, 236, 7.032698033836886,
        141, 266, 5.538013612026646,
        111, 266, 5.922753078401238,

        265, 288, 8.248177848332945,
        322, 402, 8.398545344700024,
        208, 402, 8.293885477194209,

        77, 342, 7.874698811858104,
        136, 460, 4.509515043130668,
        18, 460, 5.235023557992915,

        282, 35, 9.289833029336855,
        353, 177, 3.466665147342388,
        211, 177, 7.035225399029623,

        59, 294, 1.0647921831122253,
        130, 436, 9.681197521458015,
        -12, 436, 2.751132602268591,

        404, 271, 4.123797554933932,
        420, 303, 5.956304503232496,
        388, 303, 8.0425155641507,

        485, 110, 2.4917501076694015,
        531, 202, 7.969183818947014,
        439, 202, 8.686405030768746,

        302, 195, 3.9018629429566665,
        396, 383, 5.015131002992732,
        208, 383, 3.3652786534658263,

        451, 379, 1.7013823537675354,
        544, 565, 2.925841116148141,
        358, 565, 6.970555203353243,

        113, 376, 4.037317231250972,
        128, 406, 0.3625820792842782,
        98, 406, 8.013228820112626,

        297, 381, 9.923527191285551,
        317, 421, 4.172023741171093,
        277, 421, 1.1285804984960657,

        405, -4, 7.412010741224146,
        486, 158, 0.012557210273339559,
        324, 158, 7.425244283302722,

        445, 31, 2.4199239727249946,
        518, 177, 2.084260301974793,
        372, 177, 2.407828664549103,

        406, 330, 0.8806383101270998,
        456, 430, 4.212778765300995,
        356, 430, 3.2346754718199655,

        103, 21, 2.0591854926682296,
        167, 149, 3.108328326839528,
        39, 149, 3.761943170660673,

        420, 204, 6.717161959748747,
        436, 236, 2.493322135768622,
        404, 236, 7.245104438463467,

        253, 170, 4.085956275817848,
        351, 366, 4.019580199644316,
        155, 366, 4.621202247427276,

        237, 230, 0.5427682670152689,
        251, 258, 2.9565358508151727,
        223, 258, 7.5891620029271,

        294, 207, 3.166098681029139,
        357, 333, 6.216915052955047,
        231, 333, 8.29534378605973,

        255, 332, 4.832220001725002,
        328, 478, 3.5092643755766737,
        182, 478, 2.4151951178926243,

        401, -6, 8.579136288968952,
        478, 148, 9.880479627199431,
        324, 148, 9.138750453702437,

        147, 410, 7.119472515003309,
        213, 542, 1.9046840144659205,
        81, 542, 9.358406167284024,

        486, 253, 4.298400992215714,
        534, 349, 7.179014890864712,
        438, 349, 2.6836979724435306,

        50, 280, 9.709790715104766,
        139, 458, 0.05490051816199881,
        -39, 458, 4.82986996601605,

        417, 344, 1.6193586091358203,
        448, 406, 9.48093579286236,
        386, 406, 6.831885608563094,

        467, 240, 8.802388662617863,
        554, 414, 3.3962197628072333,
        380, 414, 9.653398010175017,

        221, 17, 8.251219788700046,
        319, 213, 4.6901025731106145,
        123, 213, 1.7397203844993836,

        459, 264, 6.3158358340493255,
        559, 464, 5.882480463274929,
        359, 464, 3.1765494767238636,

        472, 41, 1.5506902028143987,
        535, 167, 5.575439915830801,
        409, 167, 1.0235769271643758,

        376, -14, 2.8711681608245163,
        451, 136, 4.469746733841259,
        301, 136, 8.100560204525681,

        284, 333, 3.127194259269669,
        327, 419, 4.47063474222217,
        241, 419, 2.2627867876021988,

        410, 34, 1.1279757556160808,
        481, 176, 8.860858793640245,
        339, 176, 9.112081017084048,

        313, 177, 9.17288191169787,
        328, 207, 1.7316030047971698,
        298, 207, 6.5504660374924075,

        165, 459, 8.84048221484904,
        187, 503, 9.137127906734744,
        143, 503, 0.4231766103821122,

        157, 107, 7.686259082725635,
        189, 171, 5.080433999559134,
        125, 171, 6.098466975784126,

        205, 112, 6.7076595742962075,
        230, 162, 0.7759850211693153,
        180, 162, 1.0777917542567894,

        332, 144, 7.9233759563875195,
        417, 314, 8.508009911614728,
        247, 314, 5.717334234511721,

        165, 204, 2.8014568473602077,
        260, 394, 1.4474504154336676,
        70, 394, 0.789586982493008,

        244, 324, 8.746466568950455,
        255, 346, 6.544501265486291,
        233, 346, 1.0368778833650383,

        373, 398, 4.120399803377851,
        438, 528, 8.705965278119914,
        308, 528, 0.28089756877975547,

        177, 258, 8.138124364891569,
        206, 316, 5.319394152192103,
        148, 316, 8.762828596747534,

        88, 432, 6.287765801543821,
        144, 544, 3.7962372032674585,
        32, 544, 4.7003135482577,

        61, 142, 5.645856383376412,
        110, 240, 4.528750358060063,
        12, 240, 0.9864594885349098,

        60, 112, 4.3405995861916615,
        74, 140, 0.9717540955580983,
        46, 140, 1.444277523358739,

        97, 57, 4.460880127283976,
        149, 161, 7.084535938516268,
        45, 161, 8.634823158047842,

        300, 43, 8.055509986218164,
        363, 169, 1.3911800136944508,
        237, 169, 4.583242725610608,

        142, 377, 4.119540737107757,
        188, 469, 0.14700643559774518,
        96, 469, 5.350036855171478,

        177, 210, 4.618943737710176,
        191, 238, 7.903733811877921,
        163, 238, 1.7281729299956772,

        480, 347, 0.5919006903634871,
        547, 481, 2.4656398831911486,
        413, 481, 1.7829525990239292,

        235, 92, 4.829578264568318,
        333, 288, 7.1332299671891475,
        137, 288, 4.801890450695346,

        472, 11, 4.7125896639037,
        561, 189, 9.294308811201407,
        383, 189, 7.620595710684803,

        398, 225, 9.263767469854702,
        416, 261, 5.028763251885183,
        380, 261, 4.7794609113423805,

        235, 40, 0.5958575202181049,
        298, 166, 5.59657283062018,
        172, 166, 9.55765327827783,

        233, 355, 0.585272126545715,
        327, 543, 7.58342916899784,
        139, 543, 4.482077137935736,

        121, 200, 1.7945920681420646,
        214, 386, 7.375949997558581,
        28, 386, 9.224998129019683,

        303, 299, 6.088247296715607,
        320, 333, 6.6143274524868225,
        286, 333, 6.116755712382856,

        319, 369, 5.841244664946562,
        413, 557, 4.568204535437883,
        225, 557, 9.672321776303889,

        268, 46, 2.147079450542344,
        329, 168, 7.109117457159602,
        207, 168, 3.473379936238236,

        383, 394, 7.453624632065685,
        404, 436, 1.5858798115941475,
        362, 436, 3.7726533482901594,

        189, 95, 7.37423069936057,
        204, 125, 0.4432568786900992,
        174, 125, 7.057619616426076,

        488, 15, 6.050123845161789,
        570, 179, 7.677192568395116,
        406, 179, 7.64157741044106,

        386, 231, 5.56677776289896,
        477, 413, 1.4048803712136448,
        295, 413, 1.6024479104087197,

        115, 20, 5.0572569475265645,
        171, 132, 6.037051916511087,
        59, 132, 6.698878358700213,

        343, 149, 3.96558792288341,
        424, 311, 7.218924467106245,
        262, 311, 7.50115644797786,

        113, 146, 8.784033137736131,
        158, 236, 9.616802308542384,
        68, 236, 3.3439433159613143,

        366, 42, 9.705341979146397,
        421, 152, 8.546791061676986,
        311, 152, 2.443270712926574,

        196, 398, 5.965852691090502,
        294, 594, 2.714250482021603,
        98, 594, 9.35487686099104
    };

    float colors[] = {
        0.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0,
        0.0, 0.0, 1.0, 1.0, 0.0,

        1.0, 1.0, 1.0, 1.0,
        1.0, 0.0, 1.0, 1.0,
        0.0, 0.0, 1.0, 1.0, 0.0,

        0.47899908720820794, 0.06277431391655242, 0.9385181369439065, 1.0,
        0.07542362195224983, 0.5173503105080373, 0.4149360717552112, 1.0,
        0.6340848682899339, 0.7343580445712776, 0.26373155637563594, 1.0, 1.0,

        0.20522602863473638, 0.5955404564246854, 0.07543353606109526, 1.0,
        0.7660998274015157, 0.09364993411524336, 0.18767432839881448, 1.0,
        0.7780608005455646, 0.4327437046207092, 0.4500318557923705, 1.0, 1.0,

        0.32813751076986764, 0.4810910612759267, 0.05285869940305066, 1.0,
        0.30004466122402873, 0.875386761674112, 0.6774008668347395, 1.0,
        0.03639753169080462, 0.03630259772365174, 0.25067097660236326, 1.0, 1.0,

        0.3126905371025178, 0.046621287632337305, 0.816298429506158, 1.0,
        0.10564958866203145, 0.2131938518521801, 0.7882549889152303, 1.0,
        0.3958376344249315, 0.8424907746955396, 0.8097848907504479, 1.0, 1.0,

        0.5215377626226396, 0.9054272113553709, 0.035133271487885476, 1.0,
        0.6221463678826015, 0.7342643926919059, 0.17744049880411739, 1.0,
        0.21720178245205846, 0.7322293182803671, 0.19067506001323486, 1.0, 1.0,

        0.6560854329502748, 0.6106095839543458, 0.9006668576004426, 1.0,
        0.287014351930333, 0.6143324275795439, 0.32457203204713314, 1.0,
        0.3851911413717358, 0.5334418901436535, 0.7001065801077071, 1.0, 1.0,

        0.49355159362755163, 0.91506006084114, 0.8090228353286104, 1.0,
        0.5144221099641987, 0.5455710236698402, 0.8382629615091921, 1.0,
        0.8737653867702377, 0.9181005593550483, 0.4568313313862915, 1.0, 1.0,

        0.04104921303126152, 0.5073325159592864, 0.9489086554791423, 1.0,
        0.5243356553208298, 0.436126390116371, 0.7225533819132733, 1.0,
        0.0947660922344633, 0.10871075860276425, 0.5867991362575425, 1.0, 1.0,

        0.7564318045390055, 0.035964047212357575, 0.06394579809210221, 1.0,
        0.9684730917030668, 0.06652723056758347, 0.9432442153490239, 1.0,
        0.7902096774721781, 0.13056863440269673, 0.34546432076755007, 1.0, 1.0,

        0.026653708062066572, 0.17554989812332378, 0.8878926719307284, 1.0,
        0.733870873151185, 0.060240518565727985, 0.6788833163189816, 1.0,
        0.4279469034935399, 0.64450537851632, 0.7539779480482793, 1.0, 1.0,

        0.9728297837238596, 0.5497539054519627, 0.53677025940827, 1.0,
        0.6886713721154859, 0.3978436030521515, 0.7341052397568065, 1.0,
        0.3192544052233196, 0.12530859847183495, 0.28376300303388613, 1.0, 1.0,

        0.8046903814085629, 0.403705725951769, 0.7001289469451807, 1.0,
        0.5450805545929609, 0.5172577533558596, 0.6244298886251113, 1.0,
        0.022865253824993825, 0.964381425751265, 0.5707092189826213, 1.0, 1.0,

        0.6566201524000133, 0.06341794404737233, 0.9967217409275707, 1.0,
        0.020632174320769248, 0.7088061472308358, 0.4768656362639253, 1.0,
        0.9887930628080708, 0.06655194577963497, 0.5955356426069343, 1.0, 1.0,

        0.5633231428469887, 0.42532184430843567, 0.24370598493514328, 1.0,
        0.2685052687729389, 0.26625498757317934, 0.1522450843830514, 1.0,
        0.25679945063150944, 0.951289941288251, 0.5555042049439483, 1.0, 1.0,

        0.21707898458251007, 0.8140683887021011, 0.5884276597874881, 1.0,
        0.1731676056924526, 0.8351907493737578, 0.042913927786270234, 1.0,
        0.5927779771322614, 0.36866160533210623, 0.22998001507513832, 1.0, 1.0,

        0.8759476149837745, 0.20023477745395812, 0.9525567809986782, 1.0,
        0.8393574000080019, 0.5675973997308639, 0.7425065433513546, 1.0,
        0.08800964754929341, 0.4594479792583537, 0.8057961470426397, 1.0, 1.0,

        0.3900588553024197, 0.6568026506530821, 0.28465725949487997, 1.0,
        0.9141812028181635, 0.6502986631969224, 0.9748567882065376, 1.0,
        0.8236062191388139, 0.15452785106107558, 0.8384615176711052, 1.0, 1.0,

        0.0847522573830215, 0.44131667667551167, 0.925497017428375, 1.0,
        0.8134325267429602, 0.6918072187709892, 0.2622648331216142, 1.0,
        0.5864142036040676, 0.05607595296583778, 0.4820188424445262, 1.0, 1.0,

        0.6733411762685214, 0.7350003687275202, 0.5394198649274714, 1.0,
        0.6226027028137767, 0.5263268108989904, 0.30558391427343223, 1.0,
        0.10344325690376444, 0.762594375241133, 0.6356118201457276, 1.0, 1.0,

        0.962473589359444, 0.536390262266111, 0.35735940587451964, 1.0,
        0.4508837912044189, 0.3721744098428943, 0.529460747174303, 1.0,
        0.9383026596909443, 0.9383565971697486, 0.39471159827029634, 1.0, 1.0,

        0.9370661434197688, 0.29430517211243357, 0.5951749570660451, 1.0,
        0.7601287668933413, 0.19394052620907765, 0.6928573278531768, 1.0,
        0.647267628889238, 0.9116518805238102, 0.39062133732367144, 1.0, 1.0,

        0.7207878452434932, 0.7614145357776068, 0.4311154727886547, 1.0,
        0.5646918443153343, 0.18080686166473792, 0.554742287664044, 1.0,
        0.8304420205407753, 0.016766648203531687, 0.7485881788821344, 1.0, 1.0,

        0.6277869684654858, 0.5291006989131407, 0.05886296330749152, 1.0,
        0.5849951901446477, 0.6040262859194224, 0.9017396069754836, 1.0,
        0.43416160275465165, 0.2213357175009104, 0.13487223960126582, 1.0, 1.0,

        0.21174725912318115, 0.06513377207913573, 0.7510542606728856, 1.0,
        0.5467648297409443, 0.9883725878890153, 0.9177689434936633, 1.0,
        0.14995013950106928, 0.8920284611952704, 0.4470841749406931, 1.0, 1.0,

        0.8805346140715105, 0.5721484524703669, 0.11083408472823775, 1.0,
        0.3620538092836466, 0.3745804938051388, 0.636112747228132, 1.0,
        0.6027480275408166, 0.8375777369952361, 0.7317900346050918, 1.0, 1.0,

        0.5809751219332542, 0.6183190536183265, 0.10380130801471887, 1.0,
        0.1971576206000406, 0.1905825244338657, 0.7399840332138633, 1.0,
        0.677600641152157, 0.03345310375545685, 0.09093390623767839, 1.0, 1.0,

        0.45039670892829, 0.3283277418688576, 0.8613083821875155, 1.0,
        0.8729893271183233, 0.5220762350973172, 0.6484134876709563, 1.0,
        0.724112165070032, 0.6093458457527929, 0.7206822650736543, 1.0, 1.0,

        0.01678055376153431, 0.17589140802570413, 0.3967940520682397, 1.0,
        0.017010696319206042, 0.5935722031326058, 0.36655106269212023, 1.0,
        0.7836146571178583, 0.033175694675959155, 0.46576726908629207, 1.0, 1.0,

        0.35200996619283276, 0.6916575297293632, 0.19154345679544238, 1.0,
        0.6641940135430572, 0.4509995021937707, 0.4482342922259448, 1.0,
        0.7526595790756566, 0.07673186314180613, 0.7336278473514581, 1.0, 1.0,

        0.9150633544494178, 0.9955397133869347, 0.9501074726542481, 1.0,
        0.0003942908769571929, 0.5362675052141975, 0.4274016928898643, 1.0,
        0.9998948890926209, 0.6329326405438648, 0.224597356253754, 1.0, 1.0,

        0.9536719814755119, 0.13504408089094022, 0.39092105178280634, 1.0,
        0.6697421577565948, 0.5586299837339177, 0.6735350693920127, 1.0,
        0.9861322504504701, 0.8543372264299826, 0.9405590099920654, 1.0, 1.0,

        0.39924268495757476, 0.8591381625740758, 0.8249124540351842, 1.0,
        0.944577179211814, 0.5761612989443067, 0.2686877866413617, 1.0,
        0.045014885877874944, 0.7538043824763091, 0.9352382387730918, 1.0, 1.0,

        0.7541933230079025, 0.6748874964873558, 0.7346347851876229, 1.0,
        0.7616008253798895, 0.5559807780461796, 0.9336791538868789, 1.0,
        0.1942492810629346, 0.9293147818939789, 0.970933869288276, 1.0, 1.0,

        0.591851454276421, 0.2955595818179223, 0.9423518048080373, 1.0,
        0.5060469802174132, 0.48562201113645953, 0.37257224889377716, 1.0,
        0.795977581572874, 0.341314224546463, 0.9741179506567106, 1.0, 1.0,

        0.29517528071356014, 0.03159556261702323, 0.37774084111563233, 1.0,
        0.18478002567098883, 0.31011146144001067, 0.5704048416866014, 1.0,
        0.5985632824623393, 0.4637640633776874, 0.7048634290886535, 1.0, 1.0,

        0.22514413591603677, 0.22007790345061884, 0.05415038918301529, 1.0,
        0.20486999278029405, 0.12262524419251042, 0.5973253822098568, 1.0,
        0.3021143317583814, 0.46658003655592195, 0.3818148706312666, 1.0, 1.0,

        0.5232558388997338, 0.9340406095806751, 0.4048404184649378, 1.0,
        0.414218906625175, 0.5888536556514277, 0.3945701235638618, 1.0,
        0.11441432838421828, 0.5542596185825192, 0.17374018372048272, 1.0, 1.0,

        0.5684096632862614, 0.8239551940862655, 0.6731608661130573, 1.0,
        0.6542827977823199, 0.09156682623611345, 0.12574361672388223, 1.0,
        0.6916145539663676, 0.9238563651397889, 0.3201245494294337, 1.0, 1.0,

        0.5279572633618408, 0.6205367207978906, 0.3689573840129916, 1.0,
        0.002271711601428139, 0.45372592220780716, 0.1383062136489388, 1.0,
        0.5131919680406382, 0.31275897559892973, 0.09688890218666213, 1.0, 1.0,

        0.15919668800787, 0.22855824017745063, 0.5165046213025832, 1.0,
        0.811156651367823, 0.9744454892698596, 0.7703662097648896, 1.0,
        0.6702234492764967, 0.08417329114129024, 0.9296259072486497, 1.0, 1.0,

        0.019662007451411445, 0.8230828308365641, 0.11096593975422431, 1.0,
        0.8073548975357137, 0.819771359696824, 0.061022929298793716, 1.0,
        0.6648055081395602, 0.8321683576307787, 0.06169857768135767, 1.0, 1.0,

        0.1091490983707103, 0.8913031153825707, 0.5454303861841103, 1.0,
        0.8826855742794949, 0.07598426127919089, 0.07520294386744408, 1.0,
        0.32276208857484356, 0.9138963937677325, 0.7627813777562364, 1.0, 1.0,

        0.2653425145077477, 0.828065467766545, 0.21220538395995725, 1.0,
        0.9981450066531676, 0.46826827781306923, 0.8570895089428212, 1.0,
        0.9655951288762848, 0.7617228467752157, 0.720091472518965, 1.0, 1.0,

        0.3729836541827858, 0.9125771529625667, 0.5391915651268513, 1.0,
        0.8962426686111168, 0.48109203707305825, 0.523209181012961, 1.0,
        0.7160236870579929, 0.6763682020910803, 0.7801620229724348, 1.0, 1.0,

        0.23684788422883396, 0.910981793281131, 0.6863836069786747, 1.0,
        0.563416294664044, 0.8063504184581564, 0.7374113371269045, 1.0,
        0.7663834637757527, 0.1607057440394538, 0.42734735912019917, 1.0, 1.0,

        0.792820483611904, 0.09496178958279777, 0.7245487933864815, 1.0,
        0.15405933487308443, 0.6941636637270638, 0.19527436271664034, 1.0,
        0.33945765899192815, 0.22811912642157395, 0.8302742320217217, 1.0, 1.0,

        0.1947612099606768, 0.8846768595199773, 0.4174010158166296, 1.0,
        0.2512480179241924, 0.46235017878465157, 0.7985181956411648, 1.0,
        0.919094159325637, 0.7828681367677743, 0.28133024599698353, 1.0, 1.0,

        0.4162444152222531, 0.5768592624512763, 0.7684294664327114, 1.0,
        0.8300373533282843, 0.6985698912284727, 0.08008019549809264, 1.0,
        0.5156779965575807, 0.7210710584923741, 0.10902332341944132, 1.0, 1.0,

        0.13238430510635857, 0.05457139210650419, 0.3336525120707726, 1.0,
        0.5121170007439597, 0.25784872207848153, 0.302316528592797, 1.0,
        0.04628242978271413, 0.9721320168460819, 0.903424110591284, 1.0, 1.0,

        0.07608343474516599, 0.22783796880735763, 0.02706248055802074, 1.0,
        0.5878968772258886, 0.6231675624104447, 0.841207855194922, 1.0,
        0.12307029048018703, 0.33878275113305467, 0.8628376360350444, 1.0, 1.0,

        0.019834318708173537, 0.1905635877132762, 0.4316155520696333, 1.0,
        0.5799456265137815, 0.0849697298786738, 0.9317913776818473, 1.0,
        0.853857470406412, 0.7139555771875925, 0.3416453658852898, 1.0, 1.0,

        0.5750111076370822, 0.6760973934599575, 0.3446820164713189, 1.0,
        0.2072779523269298, 0.9966091154079942, 0.7240995354712357, 1.0,
        0.9763442689129883, 0.08211931179574694, 0.8644344306851698, 1.0, 1.0,

        0.2841919039112685, 0.7232021751189227, 0.3605245903908446, 1.0,
        0.27300572675293977, 0.44294762350918837, 0.44013037439300584, 1.0,
        0.6536170709354355, 0.5682324848066221, 0.36052908555117935, 1.0, 1.0,

        0.2831394480754684, 0.9199959094426601, 0.06890709483588642, 1.0,
        0.5355207206385365, 0.8120189347267579, 0.10689544171619414, 1.0,
        0.8352099306060132, 0.44373070982535623, 0.936459519408482, 1.0, 1.0,

        0.5564403902565643, 0.7076663317516381, 0.4981896405769215, 1.0,
        0.11728311129245972, 0.4936118740734726, 0.5516230913445205, 1.0,
        0.7174405057462951, 0.8961229444197845, 0.3133113197588283, 1.0, 1.0,

        0.4121619023911415, 0.04468753967627159, 0.864247582468592, 1.0,
        0.09504573198801902, 0.7354392297149699, 0.33882916062790547, 1.0,
        0.5316713938620421, 0.8984633456676295, 0.02428088379697546, 1.0, 1.0,

        0.7937323384553193, 0.907659207338141, 0.6181810608663078, 1.0,
        0.3780190124978333, 0.47963960118750937, 0.9133968286168057, 1.0,
        0.7848292881344701, 0.7526402664105187, 0.9824024136612799, 1.0, 1.0,

        0.21596762967281868, 0.7993716614876779, 0.5798810485559105, 1.0,
        0.283393465287057, 0.030269329265034006, 0.4937894611415412, 1.0,
        0.4134879597956518, 0.36795262396877015, 0.9336202850152568, 1.0, 1.0,

        0.549369111882898, 0.9172912990322071, 0.05901154737058556, 1.0,
        0.04236169596394279, 0.8833628266259826, 0.8764531653440669, 1.0,
        0.639462214389007, 0.8657151162150543, 0.024206900485252425, 1.0, 1.0,

        0.3160892020859798, 0.40039386701545043, 0.5428756225907816, 1.0,
        0.3408242629746083, 0.4966027962112426, 0.23836990254455537, 1.0,
        0.9775775245771698, 0.6954777262586194, 0.7157993322369532, 1.0, 1.0,

        0.16137964484968326, 0.1549753155399184, 0.8369206013567925, 1.0,
        0.8856049079666439, 0.7880626290797524, 0.07462990290689919, 1.0,
        0.6134494936408242, 0.2684603133680459, 0.7938248838735811, 1.0, 1.0,

        0.12476334312952919, 0.24579273666498413, 0.6890404885991184, 1.0,
        0.4524758844258514, 0.671823286141293, 0.5951733145950884, 1.0,
        0.922493266329331, 0.12025309162283326, 0.9336556237702349, 1.0, 1.0,

        0.5875446421793131, 0.9303643192297152, 0.12540816624594608, 1.0,
        0.8748735471731152, 0.9147201020136696, 0.8239955004222558, 1.0,
        0.22146441832348007, 0.6569352440535269, 0.7467356182017054, 1.0, 1.0,

        0.16786649132599674, 0.8967368318124231, 0.9739959078012352, 1.0,
        0.13694273274723512, 0.7415154394991091, 0.8831429993003237, 1.0,
        0.030233356624545626, 0.3655939030735387, 0.989208789329433, 1.0, 1.0,

        0.7268605193246523, 0.6432221258522872, 0.25938881793520674, 1.0,
        0.17327050113752318, 0.20035841978664815, 0.9820509261700721, 1.0,
        0.016968282075896846, 0.19560207647470873, 0.3288663772627016, 1.0, 1.0,

        0.012755295745681239, 0.8100294329693497, 0.8016359867427617, 1.0,
        0.1877813080979598, 0.3799563186266556, 0.5150646455446353, 1.0,
        0.9561250037772892, 0.959050126323001, 0.7017185214453493, 1.0, 1.0,

        0.8732841945036404, 0.694917823286144, 0.41737122645686053, 1.0,
        0.9904707314347203, 0.6157719945103977, 0.9979618857995024, 1.0,
        0.8467873843197723, 0.9573089982750915, 0.4639445257704363, 1.0, 1.0,

        0.43546899267241934, 0.20907225339995827, 0.25156248032724426, 1.0,
        0.9825060719259514, 0.9976361004154175, 0.06053739873974795, 1.0,
        0.7401496562091978, 0.9152420851510341, 0.8082495973248363, 1.0, 1.0,

        0.21067669381176557, 0.44220415379858435, 0.8734538713095482, 1.0,
        0.7043725719560161, 0.20602233279239435, 0.8266841445406232, 1.0,
        0.6112408465143826, 0.07060706540715245, 0.21151100178388393, 1.0, 1.0,

        0.072492253333024, 0.20894230458804275, 0.8606531857770156, 1.0,
        0.3974621017472728, 0.9677577465086855, 0.7339466074040945, 1.0,
        0.9675897309828358, 0.3234308334506518, 0.9758452963637811, 1.0, 1.0,
    };

    unsigned int misc[] = {
        width, height, triangle_count
    }; // Screen width, screen height, triangle count

    float* test = (float*)malloc(sizeof(positions));
    if (test) { memset(test, 1.0f, sizeof(positions)); }

    float* test2 = (float*)malloc(sizeof(colors));
    if (test2) { memset(test2, 1.0f, sizeof(colors)); }

    std::vector<unsigned int> tex_vector = read_bmp("idiot.bmp"); // ONLY 24-BIT MS-PAINT BMP TEXTURES SUPPORTED!
    unsigned int* tex = tex_vector.data();

    hr = D3D11CreateDevice(nullptr, D3D_DRIVER_TYPE_HARDWARE, nullptr, 0, nullptr, 0, D3D11_SDK_VERSION, &device, &level, &ctx);
    if (FAILED(hr)) { return -1; }
    shader.Shader_device(device, ctx, level);

    auto bufs = std::chrono::high_resolution_clock::now();

    //
    //
    //

    ID3D11Buffer* vbuf = nullptr;
    hr = shader.create_D3D11_buffer(&vbuf, (const void*)positions, sizeof(positions), sizeof(float), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* cbuf = nullptr;
    hr = shader.create_D3D11_buffer(&cbuf, (const void*)colors, sizeof(colors), sizeof(float), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* mbuf = nullptr;
    hr = shader.create_D3D11_buffer(&mbuf, (const void*)misc, sizeof(misc), sizeof(unsigned int), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* Vsret = nullptr;
    hr = shader.create_D3D11_buffer(&Vsret, nullptr, sizeof(positions), sizeof(float), 0, 0, D3D11_CPU_ACCESS_READ, D3D11_USAGE_STAGING);
    if (FAILED(hr)) { return hr; }
    
    ID3D11Buffer* Csret = nullptr;
    hr = shader.create_D3D11_buffer(&Csret, nullptr, sizeof(colors), sizeof(float), 0, 0, D3D11_CPU_ACCESS_READ, D3D11_USAGE_STAGING);
    if (FAILED(hr)) { return hr; }

    ID3D11UnorderedAccessView* VUAV = nullptr;
    hr = shader.create_UAV(vbuf, &VUAV, sizeof(positions) / sizeof(float), DXGI_FORMAT_R32_FLOAT);
    if (FAILED(hr)) { return hr; }

    ID3D11UnorderedAccessView* CUAV = nullptr;
    hr = shader.create_UAV(cbuf, &CUAV, sizeof(colors) / sizeof(float), DXGI_FORMAT_R32_FLOAT);
    if (FAILED(hr)) { return hr; }

    ID3D11UnorderedAccessView* MUAV = nullptr;
    hr = shader.create_UAV(mbuf, &MUAV, sizeof(misc) / sizeof(unsigned int), DXGI_FORMAT_R32_UINT);
    if (FAILED(hr)) { return hr; }

    ID3D11UnorderedAccessView* SUAVs[] = { VUAV, CUAV, MUAV };

    shader.compile_shader(L"VSFS.hlsl", "main");
    hr = device->CreateComputeShader(shader.get_shader_blob()->GetBufferPointer(), shader.get_shader_blob()->GetBufferSize(), nullptr, &compute_shader);
    if (FAILED(hr)) { return hr; }

    ctx->CSSetShader(compute_shader, nullptr, 0); // Bind the compute shader
    ctx->CSSetUnorderedAccessViews(0, 3, SUAVs, nullptr); // Bind UAV to slot u0
    
    ctx->Dispatch(ceil((double)(triangle_count / 1024.0f)), 1, 1);
    ctx->Flush();

    float* np = shader.retreive_D3D11_process<float>(Vsret, vbuf);
    float* nc = shader.retreive_D3D11_process<float>(Csret, cbuf);

    std::cout << np[100];

    if (compute_shader) {
        compute_shader->Release();
        compute_shader = nullptr;
    }

    if (vbuf) vbuf->Release();
    if (cbuf) cbuf->Release();
    if (mbuf) mbuf->Release();

    //
    //
    //

    hr = shader.create_D3D11_buffer(&buf1, (const void*)screen_mem, sizeof(unsigned int) * width * height, sizeof(unsigned int), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    hr = shader.create_D3D11_buffer(&buf2, (const void*)screen_z, sizeof(float) * width * height, sizeof(float), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* buf3;
    hr = shader.create_D3D11_buffer(&buf3, (const void*)test, sizeof(positions), sizeof(float), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* buf4;
    hr = shader.create_D3D11_buffer(&buf4, (const void*)test2, sizeof(colors), sizeof(float), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* buf5;
    hr = shader.create_D3D11_buffer(&buf5, (const void*)misc, sizeof(misc), sizeof(unsigned int), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    ID3D11Buffer* buf6;
    hr = shader.create_D3D11_buffer(&buf6, (const void*)tex, sizeof(unsigned int) * (tex[0] * tex[1] + 2), sizeof(unsigned int), D3D11_BIND_UNORDERED_ACCESS, 0, 0, D3D11_USAGE_DEFAULT);
    if (FAILED(hr)) { return hr; }

    shader.compile_shader(L"rasterizer.hlsl", "main");
    hr = device->CreateComputeShader(shader.get_shader_blob()->GetBufferPointer(), shader.get_shader_blob()->GetBufferSize(), nullptr, &compute_shader);
    if (FAILED(hr)) { return hr; }

    ID3D11UnorderedAccessView* UAV1 = nullptr;
    hr = shader.create_UAV(buf1, &UAV1, width * height, DXGI_FORMAT_R32_UINT);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 UAV\n" << std::hex << hr << "\n"; return -4; }

    ID3D11UnorderedAccessView* UAV2 = nullptr;
    hr = shader.create_UAV(buf2, &UAV2, width * height, DXGI_FORMAT_R32_FLOAT);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 UAV\n" << std::hex << hr << "\n"; return -4; }

    ID3D11UnorderedAccessView* UAV3 = nullptr;
    hr = shader.create_UAV(buf3, &UAV3, sizeof(positions) / sizeof(float), DXGI_FORMAT_R32_FLOAT);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 UAV\n" << std::hex << hr << "\n"; return -4; }

    ID3D11UnorderedAccessView* UAV4 = nullptr;
    hr = shader.create_UAV(buf4, &UAV4, sizeof(colors) / sizeof(float), DXGI_FORMAT_R32_FLOAT);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 UAV\n" << std::hex << hr << "\n"; return -4; }

    ID3D11UnorderedAccessView* UAV5 = nullptr;
    hr = shader.create_UAV(buf5, &UAV5, 3, DXGI_FORMAT_R32_UINT);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 UAV\n" << std::hex << hr << "\n"; return -4; }

    ID3D11UnorderedAccessView* UAV6 = nullptr;
    hr = shader.create_UAV(buf6, &UAV6, tex[0] * tex[1] + 2, DXGI_FORMAT_R32_UINT);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 UAV\n" << std::hex << hr << "\n"; return hr; }

    ID3D11UnorderedAccessView* UAVs[] = { UAV1, UAV2, UAV3, UAV4, UAV5, UAV6 };
    ctx->CSSetShader(compute_shader, nullptr, 0); // Bind the compute shader
    ctx->CSSetUnorderedAccessViews(0, 6, UAVs, nullptr); // Bind UAV to slot u0

    hr = shader.create_D3D11_buffer(&CPU_buf, nullptr, sizeof(float) * width * height, sizeof(float), 0, 0, D3D11_CPU_ACCESS_READ, D3D11_USAGE_STAGING);
    if (FAILED(hr)) { std::cout << "Error creating D3D11 CPU buffer\n"; return -5; }

    auto bufe = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapsedb = bufe - bufs;
    
    std::cout << "D3D11 took " << elapsedb.count() << " to initalize all the buffers and UAVs\n";

    auto srs = std::chrono::high_resolution_clock::now();

    ctx->UpdateSubresource(buf3, 0, nullptr, np, 0, 0);
    ctx->UpdateSubresource(buf4, 0, nullptr, nc, 0, 0);

    auto sre = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapseds = sre - srs;
    std::cout << "D3D11 POISITION UPDATE took: " << elapseds.count() << " ms\n";

    auto start_ = std::chrono::high_resolution_clock::now();
    
    ctx->Dispatch(ceil((double)(triangle_count / 1024.0f)), 1, 1);
    ctx->Flush();

    auto end_ = std::chrono::high_resolution_clock::now();

    ID3D11UnorderedAccessView* null_UAV = nullptr;
    ctx->CSSetUnorderedAccessViews(0, 1, &null_UAV, nullptr);
    ctx->CSSetShader(nullptr, nullptr, 0);

    unsigned int* retreive = shader.retreive_D3D11_process<unsigned int>(CPU_buf, buf1);
    if (retreive == 0) { std::cout << "Error mapping D3D11 data\n"; return -6; }
    if (retreive == nullptr) {
        return -7;
    }

    memcpy(screen_mem, retreive, width * height * sizeof(unsigned int));

    std::chrono::duration<double, std::milli> elapsed = end_ - start_;
    std::cout << "D3D11 shaders took: " << elapsed.count() << " ms\n";

    MSG msg = {};
    while (msg.message != WM_QUIT) {
        // Check Windows messages
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }

        ctx->Dispatch(ceil((double)(triangle_count / 1024.0f)), 1, 1);
        ctx->Flush();
    }

    if (test) free(test);
    if (test2) free(test2);
    if (compute_shader) compute_shader->Release();
    if (ctx) ctx->Release();
    if (device) device->Release();
    if (CPU_buf) CPU_buf->Release();
    if (buf1) buf1->Release();
    if (buf2) buf2->Release();
    if (buf3) buf3->Release();
    if (buf4) buf4->Release();
    if (buf5) buf5->Release();
    if (buf6) buf6->Release();

    return 0;
}
